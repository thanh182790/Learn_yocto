diff --git a/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts b/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts
index f1bbed9fbf73..f4b1a13bfcbe 100644
--- a/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts
+++ b/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts
@@ -100,15 +100,20 @@
 	pinctrl-names = "default";
 	pinctrl-0 = <&spi0_pins &spi0_cs_pins>;
 	cs-gpios = <&gpio 8 1>, <&gpio 7 1>;
-
-	spidev0: spidev@0{
-		compatible = "spidev";
-		reg = <0>;	/* CE0 */
-		#address-cells = <1>;
-		#size-cells = <0>;
-		spi-max-frequency = <125000000>;
-	};
-
+//	spidev0: spidev@0{
+//		compatible = "spidev";
+//		reg = <0>;	/* CE0 */
+//		#address-cells = <1>;
+//		#size-cells = <0>;
+//		spi-max-frequency = <125000000>;
+//	};
+    status = "okay";
+    nokia5110: nokia5110@0 {
+        compatible = "nokia5110";
+        reg = <0x0>;
+        spi-max-frequency = <4000000>;
+        status = "okay";
+    };
 	spidev1: spidev@1{
 		compatible = "spidev";
 		reg = <1>;	/* CE1 */
diff --git a/drivers/Kconfig b/drivers/Kconfig
index 8befa53f43be..6691f6b8b7fc 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
 menu "Device Drivers"
 
+source "drivers/nokia5110/Kconfig"
 # Keep I/O buses first
 
 source "drivers/amba/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index aaef17cc6512..0680da05df68 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -186,3 +186,4 @@ obj-$(CONFIG_SIOX)		+= siox/
 obj-$(CONFIG_GNSS)		+= gnss/
 obj-$(CONFIG_INTERCONNECT)	+= interconnect/
 obj-$(CONFIG_COUNTER)		+= counter/
+obj-$(CONFIG_NOKIA5110) += nokia5110/
diff --git a/drivers/nokia5110/Kconfig b/drivers/nokia5110/Kconfig
new file mode 100644
index 000000000000..48282b833063
--- /dev/null
+++ b/drivers/nokia5110/Kconfig
@@ -0,0 +1,5 @@
+config NOKIA5110
+    tristate "Module SPI NOKIA 5110"
+    default y
+    help
+      This is driver for module SPI NOKIA 5110.
diff --git a/drivers/nokia5110/Makefile b/drivers/nokia5110/Makefile
new file mode 100644
index 000000000000..9253ad314489
--- /dev/null
+++ b/drivers/nokia5110/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_NOKIA5110) += nokia5110.o
diff --git a/drivers/nokia5110/nokia5110.c b/drivers/nokia5110/nokia5110.c
new file mode 100644
index 000000000000..90c72564d50b
--- /dev/null
+++ b/drivers/nokia5110/nokia5110.c
@@ -0,0 +1,244 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kthread.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <asm/uaccess.h>
+#include <linux/spi/spi.h>
+
+#define LCD_WIDTH 		84
+#define LCD_HEIGHT 		48
+
+#define LCD_CMD			0
+#define LCD_DATA		1
+
+struct spi_device *nokia5110_spi;
+
+static int re_pin = 25;
+static int dc_pin = 24;
+//static int ce_pin = 26;
+
+static const unsigned short ASCII[][5] =
+{
+	{0x00, 0x00, 0x00, 0x00, 0x00}, // 20
+	{0x00, 0x00, 0x5f, 0x00, 0x00}, // 21 !
+	{0x00, 0x07, 0x00, 0x07, 0x00}, // 22 "
+	{0x14, 0x7f, 0x14, 0x7f, 0x14}, // 23 #
+	{0x24, 0x2a, 0x7f, 0x2a, 0x12}, // 24 $
+	{0x23, 0x13, 0x08, 0x64, 0x62}, // 25 %
+	{0x36, 0x49, 0x55, 0x22, 0x50}, // 26 &
+	{0x00, 0x05, 0x03, 0x00, 0x00}, // 27 '
+	{0x00, 0x1c, 0x22, 0x41, 0x00}, // 28 (
+	{0x00, 0x41, 0x22, 0x1c, 0x00}, // 29 )
+	{0x14, 0x08, 0x3e, 0x08, 0x14}, // 2a *
+	{0x08, 0x08, 0x3e, 0x08, 0x08}, // 2b +
+	{0x00, 0x50, 0x30, 0x00, 0x00}, // 2c ,
+	{0x08, 0x08, 0x08, 0x08, 0x08}, // 2d -
+	{0x00, 0x60, 0x60, 0x00, 0x00}, // 2e .
+	{0x20, 0x10, 0x08, 0x04, 0x02}, // 2f /
+	{0x3e, 0x51, 0x49, 0x45, 0x3e}, // 30 0
+	{0x00, 0x42, 0x7f, 0x40, 0x00}, // 31 1
+	{0x42, 0x61, 0x51, 0x49, 0x46}, // 32 2
+	{0x21, 0x41, 0x45, 0x4b, 0x31}, // 33 3
+	{0x18, 0x14, 0x12, 0x7f, 0x10}, // 34 4
+	{0x27, 0x45, 0x45, 0x45, 0x39}, // 35 5
+	{0x3c, 0x4a, 0x49, 0x49, 0x30}, // 36 6
+	{0x01, 0x71, 0x09, 0x05, 0x03}, // 37 7
+	{0x36, 0x49, 0x49, 0x49, 0x36}, // 38 8
+	{0x06, 0x49, 0x49, 0x29, 0x1e}, // 39 9
+	{0x00, 0x36, 0x36, 0x00, 0x00}, // 3a :
+	{0x00, 0x56, 0x36, 0x00, 0x00}, // 3b ;
+	{0x08, 0x14, 0x22, 0x41, 0x00}, // 3c <
+	{0x14, 0x14, 0x14, 0x14, 0x14}, // 3d =
+	{0x00, 0x41, 0x22, 0x14, 0x08}, // 3e >
+	{0x02, 0x01, 0x51, 0x09, 0x06}, // 3f ?
+	{0x32, 0x49, 0x79, 0x41, 0x3e}, // 40 @
+	{0x7e, 0x11, 0x11, 0x11, 0x7e}, // 41 A
+	{0x7f, 0x49, 0x49, 0x49, 0x36}, // 42 B
+	{0x3e, 0x41, 0x41, 0x41, 0x22}, // 43 C
+	{0x7f, 0x41, 0x41, 0x22, 0x1c}, // 44 D
+	{0x7f, 0x49, 0x49, 0x49, 0x41}, // 45 E
+	{0x7f, 0x09, 0x09, 0x09, 0x01}, // 46 F
+	{0x3e, 0x41, 0x49, 0x49, 0x7a}, // 47 G
+	{0x7f, 0x08, 0x08, 0x08, 0x7f}, // 48 H
+	{0x00, 0x41, 0x7f, 0x41, 0x00}, // 49 I
+	{0x20, 0x40, 0x41, 0x3f, 0x01}, // 4a J
+	{0x7f, 0x08, 0x14, 0x22, 0x41}, // 4b K
+	{0x7f, 0x40, 0x40, 0x40, 0x40}, // 4c L
+	{0x7f, 0x02, 0x0c, 0x02, 0x7f}, // 4d M
+	{0x7f, 0x04, 0x08, 0x10, 0x7f}, // 4e N
+	{0x3e, 0x41, 0x41, 0x41, 0x3e}, // 4f O
+	{0x7f, 0x09, 0x09, 0x09, 0x06}, // 50 P
+	{0x3e, 0x41, 0x51, 0x21, 0x5e}, // 51 Q
+	{0x7f, 0x09, 0x19, 0x29, 0x46}, // 52 R
+	{0x46, 0x49, 0x49, 0x49, 0x31}, // 53 S
+	{0x01, 0x01, 0x7f, 0x01, 0x01}, // 54 T
+	{0x3f, 0x40, 0x40, 0x40, 0x3f}, // 55 U
+	{0x1f, 0x20, 0x40, 0x20, 0x1f}, // 56 V
+	{0x3f, 0x40, 0x38, 0x40, 0x3f}, // 57 W
+	{0x63, 0x14, 0x08, 0x14, 0x63}, // 58 X
+	{0x07, 0x08, 0x70, 0x08, 0x07}, // 59 Y
+	{0x61, 0x51, 0x49, 0x45, 0x43}, // 5a Z
+	{0x00, 0x7f, 0x41, 0x41, 0x00}, // 5b [
+	{0x02, 0x04, 0x08, 0x10, 0x20}, // 5c ï¿½
+	{0x00, 0x41, 0x41, 0x7f, 0x00}, // 5d ]
+	{0x04, 0x02, 0x01, 0x02, 0x04}, // 5e ^
+	{0x40, 0x40, 0x40, 0x40, 0x40}, // 5f _
+	{0x00, 0x01, 0x02, 0x04, 0x00}, // 60 `
+	{0x20, 0x54, 0x54, 0x54, 0x78}, // 61 a
+	{0x7f, 0x48, 0x44, 0x44, 0x38}, // 62 b
+	{0x38, 0x44, 0x44, 0x44, 0x20}, // 63 c
+	{0x38, 0x44, 0x44, 0x48, 0x7f}, // 64 d
+	{0x38, 0x54, 0x54, 0x54, 0x18}, // 65 e
+	{0x08, 0x7e, 0x09, 0x01, 0x02}, // 66 f
+	{0x0c, 0x52, 0x52, 0x52, 0x3e}, // 67 g
+	{0x7f, 0x08, 0x04, 0x04, 0x78}, // 68 h
+	{0x00, 0x44, 0x7d, 0x40, 0x00}, // 69 i
+	{0x20, 0x40, 0x44, 0x3d, 0x00}, // 6a j
+	{0x7f, 0x10, 0x28, 0x44, 0x00}, // 6b k
+	{0x00, 0x41, 0x7f, 0x40, 0x00}, // 6c l
+	{0x7c, 0x04, 0x18, 0x04, 0x78}, // 6d m
+	{0x7c, 0x08, 0x04, 0x04, 0x78}, // 6e n
+	{0x38, 0x44, 0x44, 0x44, 0x38}, // 6f o
+	{0x7c, 0x14, 0x14, 0x14, 0x08}, // 70 p
+	{0x08, 0x14, 0x14, 0x18, 0x7c}, // 71 q
+	{0x7c, 0x08, 0x04, 0x04, 0x08}, // 72 r
+	{0x48, 0x54, 0x54, 0x54, 0x20}, // 73 s
+	{0x04, 0x3f, 0x44, 0x40, 0x20}, // 74 t
+	{0x3c, 0x40, 0x40, 0x20, 0x7c}, // 75 u
+	{0x1c, 0x20, 0x40, 0x20, 0x1c}, // 76 v
+	{0x3c, 0x40, 0x30, 0x40, 0x3c}, // 77 w
+	{0x44, 0x28, 0x10, 0x28, 0x44}, // 78 x
+	{0x0c, 0x50, 0x50, 0x50, 0x3c}, // 79 y
+	{0x44, 0x64, 0x54, 0x4c, 0x44}, // 7a z
+	{0x00, 0x08, 0x36, 0x41, 0x00}, // 7b {
+	{0x00, 0x00, 0x7f, 0x00, 0x00}, // 7c |
+	{0x00, 0x41, 0x36, 0x08, 0x00}, // 7d },
+	{0x10, 0x08, 0x08, 0x10, 0x08}, // 7e .
+	{0x00, 0x06, 0x09, 0x09, 0x06} // 7f .
+};
+
+void nokia5110_init(void);
+void nokia5110_clear_screen(void);
+void nokia5110_send_byte(bool, unsigned char);
+void nokia5110_write_char(char);
+void nokia5110_write_string(char *);
+
+void nokia5110_init()
+{
+	// set GPIOs
+//	gpio_set_value(ce_pin, 0);
+	gpio_set_value(re_pin, 0);
+	udelay(2);
+	gpio_set_value(re_pin, 1);
+
+	// init LCD
+	nokia5110_send_byte(LCD_CMD, 0x21);	// LCD Extended Commands
+	nokia5110_send_byte(LCD_CMD, 0xb1);	// Set LCD Cop (Contrast).	//0xb1
+	nokia5110_send_byte(LCD_CMD, 0x04);	// Set Temp coefficent.		//0x04
+	nokia5110_send_byte(LCD_CMD, 0x14);	// LCD bias mode 1:48. 		//0x13
+	nokia5110_send_byte(LCD_CMD, 0x0c);	// LCD in normal mode. 0x0d inverse mode
+	nokia5110_send_byte(LCD_CMD, 0x20);
+	nokia5110_send_byte(LCD_CMD, 0x0c);
+
+	nokia5110_clear_screen();
+}
+
+void nokia5110_send_byte(bool is_data, unsigned char data)
+{
+	if(is_data)
+		gpio_set_value(dc_pin, 1);
+	else
+		gpio_set_value(dc_pin, 0);
+
+	spi_write(nokia5110_spi, &data, sizeof(data));
+}
+
+void nokia5110_clear_screen()
+{
+    int i = 0;
+
+	for(i=0; i < LCD_WIDTH * LCD_HEIGHT / 8; i++)
+		nokia5110_send_byte(LCD_DATA, 0x00);
+
+	nokia5110_send_byte(LCD_CMD, 0x80 | 0); // set x coordinate to 0
+	nokia5110_send_byte(LCD_CMD, 0x40 | 0); // set y coordinate to 0
+}
+
+void nokia5110_write_char(char data)
+{
+    int i = 0;
+
+	nokia5110_send_byte(LCD_DATA, 0x00);
+	for(i=0; i < 5; i++)
+		nokia5110_send_byte(LCD_DATA, ASCII[data-0x20][i]);
+	nokia5110_send_byte(LCD_DATA, 0x00);
+}
+
+void nokia5110_write_string(char *data)
+{
+	while(*data)
+		nokia5110_write_char(*data++);
+}
+
+static int nokia5110_probe(struct spi_device *spi)
+{
+    pr_info("Insert SPI probe\n");
+	gpio_request(re_pin, "RE");
+	gpio_request(dc_pin, "DC");
+	//gpio_request(ce_pin, "CE");
+	gpio_direction_output(re_pin, 0);
+	gpio_direction_output(dc_pin, 0);
+	//gpio_direction_output(ce_pin, 0);
+	
+	nokia5110_spi = spi;
+	nokia5110_init();
+	nokia5110_clear_screen();
+	nokia5110_write_string("Hello, World!!!");
+
+    return 0;
+}
+
+static int nokia5110_remove(struct spi_device *spi)
+{
+    pr_info("Remove SPI\n");
+    nokia5110_clear_screen();
+	return 0;
+}
+
+struct of_device_id nokia5110_of_match[] = {
+	{ .compatible = "nokia5110", 0 },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, nokia5110_of_match);
+
+static struct spi_driver my_spi_driver = {
+	.probe = nokia5110_probe,
+	.remove = nokia5110_remove,
+	.driver = {
+		.name = "nokia5110", 
+		.owner = THIS_MODULE,
+		.of_match_table = nokia5110_of_match,
+	},
+};
+
+static int __init func_init(void)
+{
+    pr_info("Insert SPI %s\n", __func__);
+	return spi_register_driver(&my_spi_driver);
+}
+
+static void __exit func_exit(void)
+{
+    pr_info("Remove SPI %s\n", __func__);
+	return spi_unregister_driver(&my_spi_driver);
+}
+
+module_init(func_init);
+module_exit(func_exit);
+
+MODULE_AUTHOR("Devlinu");
+MODULE_LICENSE("GPL");
diff --git a/drivers/nokia5110/nokia5110_bk.c b/drivers/nokia5110/nokia5110_bk.c
new file mode 100644
index 000000000000..1454a1e219dc
--- /dev/null
+++ b/drivers/nokia5110/nokia5110_bk.c
@@ -0,0 +1,239 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+
+#define LCD_WIDTH  84
+#define LCD_HEIGHT 48
+
+// Commands
+#define LCD_FUNCTIONSET    0x20
+#define LCD_DISPLAYCONTROL 0x08
+#define LCD_SETYADDR      0x40
+#define LCD_SETXADDR      0x80
+
+// GPIO pins - using integer base
+#define GPIO_RST  25  // Physical pin 22
+#define GPIO_DC   24  // Physical pin 18
+
+// Font 5x8 pixels
+static const unsigned char font[][5] = {
+	{0x00, 0x00, 0x00, 0x00, 0x00}, // 20
+	{0x00, 0x00, 0x5f, 0x00, 0x00}, // 21 !
+	{0x00, 0x07, 0x00, 0x07, 0x00}, // 22 "
+	{0x14, 0x7f, 0x14, 0x7f, 0x14}, // 23 #
+	{0x24, 0x2a, 0x7f, 0x2a, 0x12}, // 24 $
+	{0x23, 0x13, 0x08, 0x64, 0x62}, // 25 %
+	{0x36, 0x49, 0x55, 0x22, 0x50}, // 26 &
+	{0x00, 0x05, 0x03, 0x00, 0x00}, // 27 '
+	{0x00, 0x1c, 0x22, 0x41, 0x00}, // 28 (
+	{0x00, 0x41, 0x22, 0x1c, 0x00}, // 29 )
+	{0x14, 0x08, 0x3e, 0x08, 0x14}, // 2a *
+	{0x08, 0x08, 0x3e, 0x08, 0x08}, // 2b +
+	{0x00, 0x50, 0x30, 0x00, 0x00}, // 2c ,
+	{0x08, 0x08, 0x08, 0x08, 0x08}, // 2d -
+	{0x00, 0x60, 0x60, 0x00, 0x00}, // 2e .
+	{0x20, 0x10, 0x08, 0x04, 0x02}, // 2f /
+	{0x3e, 0x51, 0x49, 0x45, 0x3e}, // 30 0
+	{0x00, 0x42, 0x7f, 0x40, 0x00}, // 31 1
+	{0x42, 0x61, 0x51, 0x49, 0x46}, // 32 2
+	{0x21, 0x41, 0x45, 0x4b, 0x31}, // 33 3
+	{0x18, 0x14, 0x12, 0x7f, 0x10}, // 34 4
+	{0x27, 0x45, 0x45, 0x45, 0x39}, // 35 5
+	{0x3c, 0x4a, 0x49, 0x49, 0x30}, // 36 6
+	{0x01, 0x71, 0x09, 0x05, 0x03}, // 37 7
+	{0x36, 0x49, 0x49, 0x49, 0x36}, // 38 8
+	{0x06, 0x49, 0x49, 0x29, 0x1e}, // 39 9
+	{0x00, 0x36, 0x36, 0x00, 0x00}, // 3a :
+	{0x00, 0x56, 0x36, 0x00, 0x00}, // 3b ;
+	{0x08, 0x14, 0x22, 0x41, 0x00}, // 3c <
+	{0x14, 0x14, 0x14, 0x14, 0x14}, // 3d =
+	{0x00, 0x41, 0x22, 0x14, 0x08}, // 3e >
+	{0x02, 0x01, 0x51, 0x09, 0x06}, // 3f ?
+	{0x32, 0x49, 0x79, 0x41, 0x3e}, // 40 @
+	{0x7e, 0x11, 0x11, 0x11, 0x7e}, // 41 A
+	{0x7f, 0x49, 0x49, 0x49, 0x36}, // 42 B
+	{0x3e, 0x41, 0x41, 0x41, 0x22}, // 43 C
+	{0x7f, 0x41, 0x41, 0x22, 0x1c}, // 44 D
+	{0x7f, 0x49, 0x49, 0x49, 0x41}, // 45 E
+	{0x7f, 0x09, 0x09, 0x09, 0x01}, // 46 F
+	{0x3e, 0x41, 0x49, 0x49, 0x7a}, // 47 G
+	{0x7f, 0x08, 0x08, 0x08, 0x7f}, // 48 H
+	{0x00, 0x41, 0x7f, 0x41, 0x00}, // 49 I
+	{0x20, 0x40, 0x41, 0x3f, 0x01}, // 4a J
+	{0x7f, 0x08, 0x14, 0x22, 0x41}, // 4b K
+	{0x7f, 0x40, 0x40, 0x40, 0x40}, // 4c L
+	{0x7f, 0x02, 0x0c, 0x02, 0x7f}, // 4d M
+	{0x7f, 0x04, 0x08, 0x10, 0x7f}, // 4e N
+	{0x3e, 0x41, 0x41, 0x41, 0x3e}, // 4f O
+	{0x7f, 0x09, 0x09, 0x09, 0x06}, // 50 P
+	{0x3e, 0x41, 0x51, 0x21, 0x5e}, // 51 Q
+	{0x7f, 0x09, 0x19, 0x29, 0x46}, // 52 R
+	{0x46, 0x49, 0x49, 0x49, 0x31}, // 53 S
+	{0x01, 0x01, 0x7f, 0x01, 0x01}, // 54 T
+	{0x3f, 0x40, 0x40, 0x40, 0x3f}, // 55 U
+	{0x1f, 0x20, 0x40, 0x20, 0x1f}, // 56 V
+	{0x3f, 0x40, 0x38, 0x40, 0x3f}, // 57 W
+	{0x63, 0x14, 0x08, 0x14, 0x63}, // 58 X
+	{0x07, 0x08, 0x70, 0x08, 0x07}, // 59 Y
+	{0x61, 0x51, 0x49, 0x45, 0x43}, // 5a Z
+	{0x00, 0x7f, 0x41, 0x41, 0x00}, // 5b [
+	{0x02, 0x04, 0x08, 0x10, 0x20}, // 5c ï¿½
+	{0x00, 0x41, 0x41, 0x7f, 0x00}, // 5d ]
+	{0x04, 0x02, 0x01, 0x02, 0x04}, // 5e ^
+	{0x40, 0x40, 0x40, 0x40, 0x40}, // 5f _
+	{0x00, 0x01, 0x02, 0x04, 0x00}, // 60 `
+	{0x20, 0x54, 0x54, 0x54, 0x78}, // 61 a
+	{0x7f, 0x48, 0x44, 0x44, 0x38}, // 62 b
+	{0x38, 0x44, 0x44, 0x44, 0x20}, // 63 c
+	{0x38, 0x44, 0x44, 0x48, 0x7f}, // 64 d
+	{0x38, 0x54, 0x54, 0x54, 0x18}, // 65 e
+	{0x08, 0x7e, 0x09, 0x01, 0x02}, // 66 f
+	{0x0c, 0x52, 0x52, 0x52, 0x3e}, // 67 g
+	{0x7f, 0x08, 0x04, 0x04, 0x78}, // 68 h
+	{0x00, 0x44, 0x7d, 0x40, 0x00}, // 69 i
+	{0x20, 0x40, 0x44, 0x3d, 0x00}, // 6a j
+	{0x7f, 0x10, 0x28, 0x44, 0x00}, // 6b k
+	{0x00, 0x41, 0x7f, 0x40, 0x00}, // 6c l
+	{0x7c, 0x04, 0x18, 0x04, 0x78}, // 6d m
+	{0x7c, 0x08, 0x04, 0x04, 0x78}, // 6e n
+	{0x38, 0x44, 0x44, 0x44, 0x38}, // 6f o
+	{0x7c, 0x14, 0x14, 0x14, 0x08}, // 70 p
+	{0x08, 0x14, 0x14, 0x18, 0x7c}, // 71 q
+	{0x7c, 0x08, 0x04, 0x04, 0x08}, // 72 r
+	{0x48, 0x54, 0x54, 0x54, 0x20}, // 73 s
+	{0x04, 0x3f, 0x44, 0x40, 0x20}, // 74 t
+	{0x3c, 0x40, 0x40, 0x20, 0x7c}, // 75 u
+	{0x1c, 0x20, 0x40, 0x20, 0x1c}, // 76 v
+	{0x3c, 0x40, 0x30, 0x40, 0x3c}, // 77 w
+	{0x44, 0x28, 0x10, 0x28, 0x44}, // 78 x
+	{0x0c, 0x50, 0x50, 0x50, 0x3c}, // 79 y
+	{0x44, 0x64, 0x54, 0x4c, 0x44}, // 7a z
+	{0x00, 0x08, 0x36, 0x41, 0x00}, // 7b {
+	{0x00, 0x00, 0x7f, 0x00, 0x00}, // 7c |
+	{0x00, 0x41, 0x36, 0x08, 0x00}, // 7d },
+	{0x10, 0x08, 0x08, 0x10, 0x08}, // 7e .
+	{0x00, 0x06, 0x09, 0x09, 0x06} // 7f .
+};
+
+static struct nokia5110_data {
+    struct spi_device *spi;
+} lcd;
+
+static void nokia5110_write_cmd(u8 cmd)
+{
+    gpio_set_value(GPIO_DC, 0);  // Command mode
+    spi_write(lcd.spi, &cmd, 1);
+}
+
+static void nokia5110_write_data(u8 data)
+{
+    gpio_set_value(GPIO_DC, 1);  // Data mode
+    spi_write(lcd.spi, &data, 1);
+}
+
+static void nokia5110_clear(void)
+{
+    int i;
+    nokia5110_write_cmd(LCD_SETYADDR | 0);
+    nokia5110_write_cmd(LCD_SETXADDR | 0);
+    
+    for (i = 0; i < (LCD_WIDTH * LCD_HEIGHT / 8); i++)
+        nokia5110_write_data(0x00);
+}
+
+static void nokia5110_print_string(const char *str)
+{
+    int i, j;
+    nokia5110_write_cmd(LCD_SETYADDR | 2); // Y position
+    nokia5110_write_cmd(LCD_SETXADDR | 20); // X position
+    
+    for (i = 0; str[i]; i++) {
+        char c = str[i] - 32;
+        for (j = 0; j < 5; j++) {
+            nokia5110_write_data(font[c][j]);
+        }
+        nokia5110_write_data(0x00); // Space between characters
+    }
+}
+
+static void nokia5110_init(void)
+{
+    gpio_set_value(GPIO_RST, 0);
+    mdelay(100);
+    gpio_set_value(GPIO_RST, 1);
+    mdelay(100);
+
+    nokia5110_write_cmd(0x21); // Extended commands
+    nokia5110_write_cmd(0xB1); // Set Vop (Contrast)
+    nokia5110_write_cmd(0x04); // Temp coefficient
+    nokia5110_write_cmd(0x14); // LCD bias mode
+    nokia5110_write_cmd(0x20); // Basic commands
+    nokia5110_write_cmd(0x0C); // Normal display
+    
+    nokia5110_clear();
+}
+
+static int nokia5110_probe(struct spi_device *spi)
+{
+    int ret;
+
+    lcd.spi = spi;
+    
+    // Request GPIO pins
+    ret = gpio_request(GPIO_RST, "nokia5110-rst");
+    if (ret) {
+        pr_err("Failed to request RST GPIO\n");
+        return ret;
+    }
+
+    ret = gpio_request(GPIO_DC, "nokia5110-dc");
+    if (ret) {
+        pr_err("Failed to request DC GPIO\n");
+        gpio_free(GPIO_RST);
+        return ret;
+    }
+
+    // Set GPIO directions
+    gpio_direction_output(GPIO_RST, 1);
+    gpio_direction_output(GPIO_DC, 0);
+
+    nokia5110_init();
+    nokia5110_print_string("Hello World!");
+    
+    pr_info("Nokia 5110 LCD initialized\n");
+    return 0;
+}
+
+static int nokia5110_remove(struct spi_device *spi)
+{
+    nokia5110_clear();
+    gpio_free(GPIO_RST);
+    gpio_free(GPIO_DC);
+	pr_info("Nokia 5110 LCD freed\n");
+    return 0;
+}
+
+static const struct of_device_id nokia5110_dt_ids[] = {
+    { .compatible = "nokia5110" },
+    { }
+};
+MODULE_DEVICE_TABLE(of, nokia5110_dt_ids);
+
+static struct spi_driver nokia5110_driver = {
+    .driver = {
+        .name = "nokia5110",
+        .owner = THIS_MODULE,
+        .of_match_table = nokia5110_dt_ids,
+    },
+    .probe = nokia5110_probe,
+    .remove = nokia5110_remove,
+};
+
+module_spi_driver(nokia5110_driver);
+
+MODULE_DESCRIPTION("Nokia 5110 LCD Driver");
+MODULE_AUTHOR("Your Name");
+MODULE_LICENSE("GPL");
