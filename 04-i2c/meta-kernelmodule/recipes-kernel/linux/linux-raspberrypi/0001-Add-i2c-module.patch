From 7ccb860ce22b07f3149e0d1e2517adfa0ab1f2b3 Mon Sep 17 00:00:00 2001
From: tnguyenv <nguyenvanthanh9876543210@gmail.com>
Date: Thu, 2 Jan 2025 00:28:42 +0700
Subject: [PATCH] Add i2c module

---
 arch/arm/boot/dts/bcm2708-rpi-zero-w.dts |   8 +
 drivers/Kconfig                          |   1 +
 drivers/Makefile                         |   1 +
 drivers/ssd1306/Kconfig                  |   5 +
 drivers/ssd1306/Makefile                 |   1 +
 drivers/ssd1306/ssd1306.c                | 470 +++++++++++++++++++++++
 6 files changed, 486 insertions(+)
 create mode 100644 drivers/ssd1306/Kconfig
 create mode 100644 drivers/ssd1306/Makefile
 create mode 100644 drivers/ssd1306/ssd1306.c

diff --git a/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts b/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts
index f4b1a13bfcbe..dea64fd53ab6 100644
--- a/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts
+++ b/arch/arm/boot/dts/bcm2708-rpi-zero-w.dts
@@ -131,6 +131,14 @@
 	pinctrl-names = "default";
 	pinctrl-0 = <&i2c1_pins>;
 	clock-frequency = <100000>;
+    status = "okay";
+    ssd1306: oled@3c {  /* Địa chỉ I2C của SSD1306 */
+        compatible = "ssd1306";
+        reg = <0x3c>;
+        width = <128>;
+        height = <64>;
+        status = "okay";
+    };
 };
 
 &i2c2 {
diff --git a/drivers/Kconfig b/drivers/Kconfig
index 6691f6b8b7fc..ecd7d3092caf 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
 menu "Device Drivers"
 
+source "drivers/ssd1306/Kconfig"
 source "drivers/nokia5110/Kconfig"
 # Keep I/O buses first
 
diff --git a/drivers/Makefile b/drivers/Makefile
index 0680da05df68..97a119c0b4d3 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -187,3 +187,4 @@ obj-$(CONFIG_GNSS)		+= gnss/
 obj-$(CONFIG_INTERCONNECT)	+= interconnect/
 obj-$(CONFIG_COUNTER)		+= counter/
 obj-$(CONFIG_NOKIA5110) += nokia5110/
+obj-$(CONFIG_MY_SSD1306) += ssd1306/
diff --git a/drivers/ssd1306/Kconfig b/drivers/ssd1306/Kconfig
new file mode 100644
index 000000000000..20823d5ebef4
--- /dev/null
+++ b/drivers/ssd1306/Kconfig
@@ -0,0 +1,5 @@
+config MY_SSD1306
+    tristate "Module I2C SSD1306"
+    default m
+    help
+      This is driver for module I2C SSD1306.
diff --git a/drivers/ssd1306/Makefile b/drivers/ssd1306/Makefile
new file mode 100644
index 000000000000..cb2e9f91253b
--- /dev/null
+++ b/drivers/ssd1306/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_MY_SSD1306) += ssd1306.o
diff --git a/drivers/ssd1306/ssd1306.c b/drivers/ssd1306/ssd1306.c
new file mode 100644
index 000000000000..7ad150bcf31f
--- /dev/null
+++ b/drivers/ssd1306/ssd1306.c
@@ -0,0 +1,470 @@
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/cdev.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include <asm/uaccess.h>
+
+#define SSD1306_MAX_SEG         128
+#define SSD1306_MAX_LINE        7
+#define SSD1306_DEF_FONT_SIZE   5
+#define MAX_BUFF 	        256
+
+typedef struct ssd1306_i2c_module {
+	struct i2c_client *client;
+	dev_t ssd1306_dev_num;
+	struct class *ssd1306_class;
+	struct device *ssd1306_device_p;
+	struct cdev ssd1306_cdev;
+	uint8_t line_num;
+	uint8_t cursor_position;
+	uint8_t font_size;
+} ssd1306_i2c_module_t;
+
+static int ssd1306_open(struct inode *inodep,
+      					  struct file *filep);
+static int ssd1306_release(struct inode *inodep,
+ 							 struct file *filep);
+static int ssd1306_write_ops(struct file *filep,
+						   const char *buf,
+		   				   size_t len, loff_t *offset);
+static ssize_t ssd1306_read(struct file *filp,
+							 char __user *buf,
+							 size_t len,
+							 loff_t *off);
+
+char message[MAX_BUFF];
+ssd1306_i2c_module_t* module_ssd1306 = NULL;
+static struct file_operations fops = {
+	.owner      = THIS_MODULE,
+	.open = ssd1306_open,
+	.release = ssd1306_release,
+	.write = ssd1306_write_ops,
+	.read = ssd1306_read
+};
+
+static const unsigned char ssd1306_font[][SSD1306_DEF_FONT_SIZE] = {
+	{0x00, 0x00, 0x00, 0x00, 0x00}, // space
+	{0x00, 0x00, 0x2f, 0x00, 0x00}, // !
+	{0x00, 0x07, 0x00, 0x07, 0x00}, // "
+	{0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
+	{0x24, 0x2a, 0x7f, 0x2a, 0x12}, // $
+	{0x23, 0x13, 0x08, 0x64, 0x62}, // %
+	{0x36, 0x49, 0x55, 0x22, 0x50}, // &
+	{0x00, 0x05, 0x03, 0x00, 0x00}, // '
+	{0x00, 0x1c, 0x22, 0x41, 0x00}, // (
+	{0x00, 0x41, 0x22, 0x1c, 0x00}, // )
+	{0x14, 0x08, 0x3E, 0x08, 0x14}, // *
+	{0x08, 0x08, 0x3E, 0x08, 0x08}, // +
+	{0x00, 0x00, 0xA0, 0x60, 0x00}, // ,
+	{0x08, 0x08, 0x08, 0x08, 0x08}, // -
+	{0x00, 0x60, 0x60, 0x00, 0x00}, // .
+	{0x20, 0x10, 0x08, 0x04, 0x02}, // /
+	{0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
+	{0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
+	{0x42, 0x61, 0x51, 0x49, 0x46}, // 2
+	{0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
+	{0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
+	{0x27, 0x45, 0x45, 0x45, 0x39}, // 5
+	{0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
+	{0x01, 0x71, 0x09, 0x05, 0x03}, // 7
+	{0x36, 0x49, 0x49, 0x49, 0x36}, // 8
+	{0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
+	{0x00, 0x36, 0x36, 0x00, 0x00}, // :
+	{0x00, 0x56, 0x36, 0x00, 0x00}, // ;
+	{0x08, 0x14, 0x22, 0x41, 0x00}, // <
+	{0x14, 0x14, 0x14, 0x14, 0x14}, // =
+	{0x00, 0x41, 0x22, 0x14, 0x08}, // >
+	{0x02, 0x01, 0x51, 0x09, 0x06}, // ?
+	{0x32, 0x49, 0x59, 0x51, 0x3E}, // @
+	{0x7C, 0x12, 0x11, 0x12, 0x7C}, // A
+	{0x7F, 0x49, 0x49, 0x49, 0x36}, // B
+	{0x3E, 0x41, 0x41, 0x41, 0x22}, // C
+	{0x7F, 0x41, 0x41, 0x22, 0x1C}, // D
+	{0x7F, 0x49, 0x49, 0x49, 0x41}, // E
+	{0x7F, 0x09, 0x09, 0x09, 0x01}, // F
+	{0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
+	{0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
+	{0x00, 0x41, 0x7F, 0x41, 0x00}, // I
+	{0x20, 0x40, 0x41, 0x3F, 0x01}, // J
+	{0x7F, 0x08, 0x14, 0x22, 0x41}, // K
+	{0x7F, 0x40, 0x40, 0x40, 0x40}, // L
+	{0x7F, 0x02, 0x0C, 0x02, 0x7F}, // M
+	{0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
+	{0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
+	{0x7F, 0x09, 0x09, 0x09, 0x06}, // P
+	{0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
+	{0x7F, 0x09, 0x19, 0x29, 0x46}, // R
+	{0x46, 0x49, 0x49, 0x49, 0x31}, // S
+	{0x01, 0x01, 0x7F, 0x01, 0x01}, // T
+	{0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
+	{0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
+	{0x3F, 0x40, 0x38, 0x40, 0x3F}, // W
+	{0x63, 0x14, 0x08, 0x14, 0x63}, // X
+	{0x07, 0x08, 0x70, 0x08, 0x07}, // Y
+	{0x61, 0x51, 0x49, 0x45, 0x43}, // Z
+	{0x00, 0x7F, 0x41, 0x41, 0x00}, // [
+	{0x55, 0xAA, 0x55, 0xAA, 0x55}, // Backslash (Checker pattern)
+	{0x00, 0x41, 0x41, 0x7F, 0x00}, // ]
+	{0x04, 0x02, 0x01, 0x02, 0x04}, // ^
+	{0x40, 0x40, 0x40, 0x40, 0x40}, // _
+	{0x00, 0x03, 0x05, 0x00, 0x00}, // `
+	{0x20, 0x54, 0x54, 0x54, 0x78}, // a
+	{0x7F, 0x48, 0x44, 0x44, 0x38}, // b
+	{0x38, 0x44, 0x44, 0x44, 0x20}, // c
+	{0x38, 0x44, 0x44, 0x48, 0x7F}, // d
+	{0x38, 0x54, 0x54, 0x54, 0x18}, // e
+	{0x08, 0x7E, 0x09, 0x01, 0x02}, // f
+	{0x18, 0xA4, 0xA4, 0xA4, 0x7C}, // g
+	{0x7F, 0x08, 0x04, 0x04, 0x78}, // h
+	{0x00, 0x44, 0x7D, 0x40, 0x00}, // i
+	{0x40, 0x80, 0x84, 0x7D, 0x00}, // j
+	{0x7F, 0x10, 0x28, 0x44, 0x00}, // k
+	{0x00, 0x41, 0x7F, 0x40, 0x00}, // l
+	{0x7C, 0x04, 0x18, 0x04, 0x78}, // m
+	{0x7C, 0x08, 0x04, 0x04, 0x78}, // n
+	{0x38, 0x44, 0x44, 0x44, 0x38}, // o
+	{0xFC, 0x24, 0x24, 0x24, 0x18}, // p
+	{0x18, 0x24, 0x24, 0x18, 0xFC}, // q
+	{0x7C, 0x08, 0x04, 0x04, 0x08}, // r
+	{0x48, 0x54, 0x54, 0x54, 0x20}, // s
+	{0x04, 0x3F, 0x44, 0x40, 0x20}, // t
+	{0x3C, 0x40, 0x40, 0x20, 0x7C}, // u
+	{0x1C, 0x20, 0x40, 0x20, 0x1C}, // v
+	{0x3C, 0x40, 0x30, 0x40, 0x3C}, // w
+	{0x44, 0x28, 0x10, 0x28, 0x44}, // x
+	{0x1C, 0xA0, 0xA0, 0xA0, 0x7C}, // y
+	{0x44, 0x64, 0x54, 0x4C, 0x44}, // z
+	{0x00, 0x10, 0x7C, 0x82, 0x00}, // {
+	{0x00, 0x00, 0xFF, 0x00, 0x00}, // |
+	{0x00, 0x82, 0x7C, 0x10, 0x00}, // }
+	{0x00, 0x06, 0x09, 0x09, 0x06}  // ~ (Degrees)
+};
+
+static int ssd1306_i2c_write(ssd1306_i2c_module_t *module, unsigned char *buf, unsigned int len)
+{
+    return i2c_master_send(module->client, buf, len);
+}
+
+static int ssd1306_i2c_read(ssd1306_i2c_module_t *module, unsigned char *out_buf, unsigned int len)
+{
+    return i2c_master_recv(module->client, out_buf, len);
+}
+
+static void ssd1306_write(ssd1306_i2c_module_t *module, bool is_cmd, unsigned char data)
+{
+	unsigned char buf[2] = {0};
+
+	if (is_cmd == true) {
+		buf[0] = 0x00;
+	} else {
+		buf[0] = 0x40;
+	}
+
+	buf[1] = data;
+	ssd1306_i2c_write(module, buf, 2);
+}
+
+static void ssd1306_set_cursor(ssd1306_i2c_module_t *module, uint8_t line_num, uint8_t cursor_position)
+{
+	if ((line_num <= SSD1306_MAX_LINE) && (cursor_position < SSD1306_MAX_SEG)) {
+		module->line_num = line_num;                       // Save the specified line number
+		module->cursor_position = cursor_position; // Save the specified cursor position
+		ssd1306_write(module, true, 0x21);                                 // cmd for the column start and end address
+		ssd1306_write(module, true, cursor_position);      // column start addr
+		ssd1306_write(module, true, SSD1306_MAX_SEG - 1);  // column end addr
+		ssd1306_write(module, true, 0x22);                                 // cmd for the page start and end address
+		ssd1306_write(module, true, line_num);                     // page start addr
+		ssd1306_write(module, true, SSD1306_MAX_LINE);     // page end addr
+	}
+}
+
+static void ssd1306_goto_next_line(ssd1306_i2c_module_t *module)
+{
+	module->line_num++;
+	module->line_num = (module->line_num & SSD1306_MAX_LINE);
+	ssd1306_set_cursor(module, module->line_num, 0);
+}
+
+static void ssd1306_print_char(ssd1306_i2c_module_t *module, unsigned char c)
+{
+	uint8_t data_byte;
+	uint8_t temp = 0;
+
+	if (((module->cursor_position + module->font_size) >= SSD1306_MAX_SEG) || (c == '\n'))
+			ssd1306_goto_next_line(module);
+
+	if (c != '\n') {
+		c -= 0x20;
+		do {
+			data_byte = ssd1306_font[c][temp];
+			ssd1306_write(module, false, data_byte);
+			module->cursor_position++;
+
+			temp++;
+		} while (temp < module->font_size);
+
+		ssd1306_write(module, false, 0x00);
+		module->cursor_position++;
+	}
+}
+
+static void ssd1306_set_brightness(ssd1306_i2c_module_t *module, uint8_t brightness)
+{
+	ssd1306_write(module, true, 0x81);
+	ssd1306_write(module, true, brightness);
+}
+
+static void ssd1306_clear(ssd1306_i2c_module_t *module)
+{
+	unsigned int total = 128 * 8;
+	int i;
+
+	for (i = 0; i < total; i++) {
+		ssd1306_write(module, false, 0);
+	}
+}
+
+static void ssd1306_print_string(ssd1306_i2c_module_t *module, unsigned char *str)
+{
+	ssd1306_clear(module);
+	ssd1306_set_cursor(module, 0, 0);
+	while (*str) {
+		ssd1306_print_char(module, *str++);
+	}
+}
+
+static int ssd1306_display_init(ssd1306_i2c_module_t *module)
+{
+	msleep(100);
+	ssd1306_write(module, true, 0xAE); // Entire Display OFF
+	ssd1306_write(module, true, 0xD5); // Set Display Clock Divide Ratio and Oscillator Frequency
+	ssd1306_write(module, true, 0x80); // Default Setting for Display Clock Divide Ratio and Oscillator Frequency that is recommended
+	ssd1306_write(module, true, 0xA8); // Set Multiplex Ratio
+	ssd1306_write(module, true, 0x3F); // 64 COM lines
+	ssd1306_write(module, true, 0xD3); // Set display offset
+	ssd1306_write(module, true, 0x00); // 0 offset
+	ssd1306_write(module, true, 0x40); // Set first line as the start line of the display
+	ssd1306_write(module, true, 0x8D); // Charge pump
+	ssd1306_write(module, true, 0x14); // Enable charge dump during display on
+	ssd1306_write(module, true, 0x20); // Set memory addressing mode
+	ssd1306_write(module, true, 0x00); // Horizontal addressing mode
+	ssd1306_write(module, true, 0xA1); // Set segment remap with column address 127 mapped to segment 0
+	ssd1306_write(module, true, 0xC8); // Set com output scan direction, scan from com63 to com 0
+	ssd1306_write(module, true, 0xDA); // Set com pins hardware configuration
+	ssd1306_write(module, true, 0x12); // Alternative com pin configuration, disable com left/right remap
+	ssd1306_write(module, true, 0x81); // Set contrast control
+	ssd1306_write(module, true, 0x80); // Set Contrast to 128
+	ssd1306_write(module, true, 0xD9); // Set pre-charge period
+	ssd1306_write(module, true, 0xF1); // Phase 1 period of 15 DCLK, Phase 2 period of 1 DCLK
+	ssd1306_write(module, true, 0xDB); // Set Vcomh deselect level
+	ssd1306_write(module, true, 0x20); // Vcomh deselect level ~ 0.77 Vcc
+	ssd1306_write(module, true, 0xA4); // Entire display ON, resume to RAM content display
+	ssd1306_write(module, true, 0xA6); // Set Display in Normal Mode, 1 = ON, 0 = OFF
+	ssd1306_write(module, true, 0x2E); // Deactivate scroll
+	ssd1306_write(module, true, 0xAF); // Display ON in normal mode
+	ssd1306_clear(module);
+
+	return 0;
+}
+
+/*
+ * Turn on LCD
+ */
+static int ssd1306_open(struct inode *inodep, struct file *filep)
+{
+	pr_info("Go to %s, %d\n", __func__, __LINE__);
+	return 0;
+}
+
+/*
+ * Turn off LCD
+ */
+static int ssd1306_release(struct inode *inodep, struct file *filep)
+{
+	pr_info("Go to %s, %d\n", __func__, __LINE__);
+
+	filep->private_data = NULL;
+	return 0;
+}
+
+/*
+ * Display Text to LCD
+ */
+static int ssd1306_write_ops(struct file *filep, const char *buf,
+						     size_t len, loff_t *offset)
+{
+	int ret;
+
+	pr_info("Go to %s, %d\n", __func__, __LINE__);
+	memset(message, 0x0, sizeof(message));
+    if (len > sizeof(message) - 1) {
+        pr_info("Input data too large, truncating...\n");
+        len = sizeof(message) - 1;
+    }
+
+    ret = copy_from_user(message, buf, len);
+	if (ret) {
+		pr_err("can not copy from user\n");
+		return -ENOMSG;
+	}
+	pr_info("\nUser send: \"%s\"\n", message);
+	ssd1306_clear(module_ssd1306);
+	ssd1306_print_string(module_ssd1306, message);
+
+	return len;
+}
+
+/*
+ * Read Text from LCD
+ */
+static ssize_t ssd1306_read(struct file *filp, char __user *buf, size_t len, loff_t *off)
+{
+    ssize_t bytes_to_read = min(len, (size_t)(MAX_BUFF - *off));
+
+    if (bytes_to_read <= 0) {
+        pr_info("Data Read: End of file\n");
+        return 0; // End of file
+    }
+
+    if (copy_to_user(buf, message + *off, bytes_to_read)) {
+        pr_err("Data Read: Err!\n");
+        return -EFAULT; 
+    }
+
+    *off += bytes_to_read;
+    pr_info("Data Read: Done!\n");
+    return bytes_to_read;
+}
+
+static int ssd1306_create_device_file(ssd1306_i2c_module_t *module)
+{
+	int res = 0;
+	pr_info("Go to : %s, %d\n", __func__, __LINE__);
+	/* Register range device numbers for number of LCD devices */
+	res = alloc_chrdev_region(&(module->ssd1306_dev_num), 0, 1, "ssd1306_device");
+	pr_info("Major = %d Minor = %d\n", MAJOR(module->ssd1306_dev_num), MINOR(module->ssd1306_dev_num));
+	if (res < 0) {
+		pr_info("Error occur, can not register major number\n");
+		goto alloc_dev_failed;
+	}
+
+	/* Create the class for all of LCD Devices */
+	module->ssd1306_class = class_create(THIS_MODULE, "ssd1306_class");
+	if (module->ssd1306_class  == NULL) {
+		pr_info("Error occur, can not create class device\n");
+		goto create_class_failed;
+	}
+
+	/* Create Device File In User Space */
+	module->ssd1306_device_p = device_create(module->ssd1306_class, NULL, module->ssd1306_dev_num,
+							   NULL, "ssd1306"); /* /dev/ssd1306*/
+	if (module->ssd1306_device_p == NULL) {
+		pr_info("Error occur, can not register major number\n");
+		goto device_create_fail;
+	}
+
+	/* Register operations of device */
+	cdev_init(&module->ssd1306_cdev, &fops);
+	(module->ssd1306_cdev).owner = THIS_MODULE;
+	(module->ssd1306_cdev).dev = module->ssd1306_dev_num;
+
+	res = cdev_add(&module->ssd1306_cdev, module->ssd1306_dev_num, 1);
+	if (res) {
+		pr_info("error occur when add properties for struct cdev\n");
+		goto cdev_add_fail;
+	}
+	pr_info("Go out : %s, %d \n", __func__, res);
+	return res;
+cdev_add_fail:
+	device_destroy(module->ssd1306_class, module->ssd1306_dev_num);
+device_create_fail:
+    class_destroy(module->ssd1306_class);
+create_class_failed:
+	unregister_chrdev_region(module->ssd1306_dev_num, 1);
+alloc_dev_failed:
+	return res;	
+}
+
+static int ssd1306_i2c_probe(struct i2c_client *client)
+{
+	ssd1306_i2c_module_t *module;
+	pr_info("Go to I2c probe: %s, %d\n", __func__, __LINE__);
+	module = kmalloc(sizeof(*module), GFP_KERNEL);
+	if (!module) {
+		pr_err("kmalloc failed\n");
+		return -1;
+	}
+
+	module->client = client;
+	module->line_num = 0;
+	module->cursor_position = 0;
+	module->font_size = SSD1306_DEF_FONT_SIZE;
+	i2c_set_clientdata(client, module);
+	ssd1306_display_init(module);
+	ssd1306_set_cursor(module, 0, 0);
+	if (ssd1306_create_device_file(module) != 0) {
+		kfree(module);
+		pr_err("Fail to create device file.\n");
+		return -1;
+	}
+
+	module_ssd1306 = module;
+	pr_info("Go out I2c probe: %s, %d\n", __func__, __LINE__);
+	return 0;
+}
+
+static int ssd1306_i2c_remove(struct i2c_client *client)
+{
+	ssd1306_i2c_module_t *module = i2c_get_clientdata(client);
+	ssd1306_print_string(module, "End!!!");
+	msleep(1000);
+	ssd1306_clear(module);
+	ssd1306_write(module, true, 0xAE); // Entire Display OFF
+    cdev_del(&module->ssd1306_cdev);
+	device_destroy(module->ssd1306_class, module->ssd1306_dev_num);                                 
+    class_destroy(module->ssd1306_class);              
+    unregister_chrdev_region(module->ssd1306_dev_num, 1); 
+	kfree(module);
+	pr_info("Devlinux_end: %s, %d\n", __func__, __LINE__);
+	return 0;
+}
+
+static const struct of_device_id ssd1306_of_match_id[] = {
+	{ .compatible = "ssd1306", 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, ssd1306_of_match_id);
+
+static struct i2c_driver ssd1306_i2c_driver = {
+	.driver = {
+		.name = "ssd1306",
+		.owner = THIS_MODULE,
+		.of_match_table = ssd1306_of_match_id,
+	},
+	.probe_new = ssd1306_i2c_probe,
+	.remove = ssd1306_i2c_remove,
+};
+
+static int __init func_init(void)
+{
+	/* Register spi_driver - protocol driver */
+	return i2c_register_driver(THIS_MODULE, &ssd1306_i2c_driver);
+}
+
+static void __exit func_exit(void)
+{        
+	return i2c_del_driver(&ssd1306_i2c_driver);
+}
+
+module_init(func_init);
+module_exit(func_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("DevLinux");
+MODULE_DESCRIPTION("SSD1306");
